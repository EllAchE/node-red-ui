/**
 * Copyright JS Foundation and other contributors, http://js.foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 **/

$(function () {
  if (window.location.hostname !== 'localhost' && window.location.hostname !== '127.0.0.1') {
    document.title = document.title + ' : ' + window.location.hostname;
  }
  // ------------------------------------------------------------------
  // Mock all backend requests so the editor can run in a stateless mode
  // ------------------------------------------------------------------
  (function ($) {
    if (!$) {
      return;
    }
    var oldAjax = $.ajax;
    $.ajax = function (options) {
      var url = (options && options.url) || '';
      var method = (options && (options.type || options.method)) || 'GET';
      console.warn('Mock AJAX request', method, url, options);

      let resolved = {};
      switch (true) {
        case url === 'theme' && method.toLowerCase() === 'get':
          resolved = getTheme();
          break;
        case url === 'settings' && method.toLowerCase() === 'get':
          resolved = getSettings();
          break;
        default:
          alert('Mock AJAX request: ' + method + ' ' + url + '\n\nCalled from:\n' + new Error().stack);
        // throw new Error("Mock AJAX request: " + method + " " + url + "\n\nCalled from:\n" + new Error().stack);
      }

      var d = $.Deferred();
      d.resolve(resolved);
      return d.promise();
    };
  })(jQuery);
  (function () {
    var OldWebSocket = window.WebSocket;
    function MockWebSocket(url) {
      this.url = url;
      this.readyState = MockWebSocket.CLOSED;
      console.warn('Mock WebSocket connection:', url);

      alert('Mock WebSocket connection: ' + url + '\n\nCalled from:\n' + new Error().stack);
      var self = this;
      setTimeout(function () {
        if (self.onopen) {
          self.onopen();
        }
      }, 0);
    }
    MockWebSocket.prototype.send = function (data) {
      console.warn('Mock WebSocket send', data);

      alert('Mock WebSocket send: ' + data + '\n\nCalled from:\n' + new Error().stack);
    };
    MockWebSocket.prototype.close = function () {
      console.warn('Mock WebSocket close');
    };
    MockWebSocket.OPEN = 1;
    MockWebSocket.CLOSED = 3;
    window.WebSocket = MockWebSocket;
  })();

  if (RED && RED.comms && typeof RED.comms.connect === 'function') {
    RED.comms.connect = function () {
      console.warn('Mock comms.connect called');

      alert('Mock WebSocket connect invoked\n\nCalled from:\n' + new Error().stack);
    };
  }
  RED.init({
    apiRootUrl: '',
  });
});

function getSettings() {
  return {
    version: '3.1.0',
    user: {
      anonymous: true,
      permissions: ['*'],
    },
    editorTheme: {
      projects: {
        enabled: false,
      },
      palette: {
        catalogues: [],
      },
      menu: {
        'menu-item-import-library': true,
        'menu-item-export-library': true,
        'menu-item-keyboard-shortcuts': true,
        'menu-item-help': {
          label: 'Help',
          url: 'https://nodered.org/docs',
        },
      },
      header: {
        title: 'Node-RED',
        image: 'red/images/node-red.svg',
      },
      deployButton: {
        type: 'default',
      },
      userMenu: false,
      login: {
        image: 'red/images/node-red.svg',
      },
      page: {
        title: 'Node-RED',
        favicon: 'favicon.ico',
        css: [],
        scripts: [],
      },
      sidebar: {
        width: 250,
      },
      palette: {
        editable: true,
      },
      projects: {
        enabled: false,
      },
      multiplayer: {
        enabled: false,
      },
      tours: [],
    },
    externalModules: {
      palette: {
        allowInstall: true,
      },
    },
    httpNodeAuth: {
      user: '',
      pass: '',
    },
    httpStaticAuth: {
      user: '',
      pass: '',
    },
    httpRoot: '/',
    httpAdminRoot: '/',
    httpNodeRoot: '/',
    version: '3.1.0',
    userDir: '',
    flowFile: 'flows.json',
    flowFilePretty: true,
    uiPort: 1880,
    disableEditor: false,
    layout: {
      md: {
        left: {
          width: '50%',
        },
        right: {
          width: '50%',
        },
      },
    },
    debugMaxLength: 1000,
    mqttReconnectTime: 5000,
    serialReconnectTime: 5000,
    tcpReconnectTime: 5000,
    mqttKeepalive: 60,
    tcpTimeout: 120,
    maxMsgSize: 128,
    nodeMessageBufferMaxLength: 0,
    useUnknown: false,
    autoInstallModules: false,
    autoInstallModulesRetry: 3,
    autoInstallModulesRetryTime: 10,
    paletteCategories: [],
    editorTheme: {
      projects: {
        enabled: false,
      },
    },
    functionExternalModules: true,
    functionTimeout: 0,
    functionGlobalContext: {},
    functionGlobalContextFiles: [],
    nodeMessageBufferMaxLength: 0,
    ui: {
      path: 'red',
      title: 'Node-RED',
      favicon: 'favicon.ico',
      css: [],
      scripts: [],
      menu: {},
      header: {
        title: 'Node-RED',
        image: 'red/images/node-red.svg',
      },
      footer: {
        text: '',
      },
      sidebar: {
        width: 250,
      },
      palette: {
        editable: true,
        catalogues: [],
      },
      projects: {
        enabled: false,
      },
      tours: [],
    },
  };
}

function getTheme() {
  return {
    header: {
      title: 'Node-RED',
      image: 'red/images/node-red.svg',
      url: undefined,
    },
  };
}
