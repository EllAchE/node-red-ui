/**
 * Copyright JS Foundation and other contributors, http://js.foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 **/

$(function() {
    if ((window.location.hostname !== "localhost") && (window.location.hostname !== "127.0.0.1")) {
        document.title = document.title+" : "+window.location.hostname;
    }
    // ------------------------------------------------------------------
    // Mock all backend requests so the editor can run in a stateless mode
    // ------------------------------------------------------------------
    (function($) {
        if (!$) { return; }
        var oldAjax = $.ajax;
        $.ajax = function(options) {
            var url = options && options.url || "";
            var method = (options && (options.type || options.method)) || "GET";
            console.warn("Mock AJAX request", method, url, options);
            alert("Mock AJAX request: " + method + " " + url);
            var d = $.Deferred();
            d.resolve({});
            return d.promise();
        };
    })(jQuery);

    (function() {
        var OldWebSocket = window.WebSocket;
        function MockWebSocket(url) {
            this.url = url;
            this.readyState = MockWebSocket.CLOSED;
            console.warn("Mock WebSocket connection:", url);
            alert("Mock WebSocket connection: " + url);
            var self = this;
            setTimeout(function() {
                if (self.onopen) { self.onopen(); }
            },0);
        }
        MockWebSocket.prototype.send = function(data) {
            console.warn("Mock WebSocket send", data);
        };
        MockWebSocket.prototype.close = function() {
            console.warn("Mock WebSocket close");
        };
        MockWebSocket.OPEN = 1;
        MockWebSocket.CLOSED = 3;
        window.WebSocket = MockWebSocket;
    })();

    if (RED && RED.comms && typeof RED.comms.connect === "function") {
        RED.comms.connect = function() {
            console.warn("Mock comms.connect called");
            alert("Mock WebSocket connect invoked");
        };
    }
    RED.init({
        apiRootUrl: ""
    });
});
