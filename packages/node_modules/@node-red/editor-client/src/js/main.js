/**
 * Copyright JS Foundation and other contributors, http://js.foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 **/

$(function () {
  if (window.location.hostname !== 'localhost' && window.location.hostname !== '127.0.0.1') {
    document.title = document.title + ' : ' + window.location.hostname;
  }
  // ------------------------------------------------------------------
  // Mock all backend requests so the editor can run in a stateless mode
  // ------------------------------------------------------------------
  (function ($) {
    if (!$) {
      return;
    }
    var oldAjax = $.ajax;
    $.ajax = function (options) {
      var url = (options && options.url) || '';
      var method = (options && (options.type || options.method)) || 'GET';

      console.log(url + " || " + method)
      let resolved = {};
      switch (true) {
        case url === 'theme' && method.toLowerCase() === 'get':
          if (!false) return oldAjax(options)
          // Return mock response for now
          resolved = getTheme();
          break;
        case url === 'settings' && method.toLowerCase() === 'get':
          if (!false) return oldAjax(options)
          // return oldAjax(options)
          // Call the original method and capture the response
          // Return mock response for now
          resolved = getSettings();
          break;
        case url === 'settings/user' && method.toLowerCase() === 'get':
          return oldAjax(options)
        case url === "types/node-red/util.d.ts" && method.toLowerCase() === 'get':
          // Return mock response for now
          return oldAjax(options)
        case url === 'types/node-red/func.d.ts' && method.toLowerCase() === 'get':
          // Return mock response for now
          return oldAjax(options)

        case url === "types/node/globals.d.ts" && method.toLowerCase() === 'get':
          // Return mock response for now
          return oldAjax(options)
        case url === "types/node/console.d.ts" && method.toLowerCase() === 'get':
          // Return mock response for now
          return oldAjax(options)
        case url === "types/node/buffer.d.ts" && method.toLowerCase() === 'get':
        case url === "types/node/timers.d.ts" && method.toLowerCase() === 'get':
        case url === "types/node/util.d.ts" && method.toLowerCase() === 'get':
        default:
          return oldAjax(options)
          // alert('Mock AJAX request: ' + method + ' ' + url + '\n\nCalled from:\n' + new Error().stack);
          // throw new Error("Mock AJAX request: " + method + " " + url + "\n\nCalled from:\n" + new Error().stack);
      }

          //   oldAjax(options).then(function(response) {
          //   console.log('=== ORIGINAL RESPONSE ===');
          //   console.log('URL:', url);
          //   console.log('Method:', method);
          //   console.log('Response:', response);
          //   console.log('Response type:', typeof response);
          //   console.log('Response keys:', Object.keys(response));
          //   console.log('=== END ORIGINAL  RESPONSE ===');
          // }).catch(function(error) {
          //   console.error('Original theme request failed:', error);
          // });

      // console.dir(resolved)
      
      // Return a jQuery promise that resolves with the mock data
      return $.Deferred().resolve(resolved).promise();
    };
  })(jQuery);
  (function () {
    var OldWebSocket = window.WebSocket;
    function MockWebSocket(url) {
      this.url = url;
      this.readyState = MockWebSocket.CLOSED;
      console.warn('Mock WebSocket connection:', url);

      alert('Mock WebSocket connection: ' + url + '\n\nCalled from:\n' + new Error().stack);
      var self = this;
      setTimeout(function () {
        if (self.onopen) {
          self.onopen();
        }
      }, 0);
    }
    MockWebSocket.prototype.send = function (data) {
      console.warn('Mock WebSocket send', data);

      alert('Mock WebSocket send: ' + data + '\n\nCalled from:\n' + new Error().stack);
    };
    MockWebSocket.prototype.close = function () {
      console.warn('Mock WebSocket close');
    };
    MockWebSocket.OPEN = 1;
    MockWebSocket.CLOSED = 3;
    window.WebSocket = MockWebSocket;
  })();

  if (RED && RED.comms && typeof RED.comms.connect === 'function') {
    RED.comms.connect = function () {
      console.warn('Mock comms.connect called');

      alert('Mock WebSocket connect invoked\n\nCalled from:\n' + new Error().stack);
    };
  }
  RED.init({
    apiRootUrl: '',
  });
});

function getSettings() {
  return {
  "httpNodeRoot": "/",
  "version": "4.0.9",
  "context": {
    "default": "memory",
    "stores": [
      "memory"
    ]
  },
  "codeEditor": {
    "lib": "monaco",
    "options": {}
  },
  "markdownEditor": {
    "mermaid": {
      "enabled": true
    }
  },
  "libraries": [
    {
      "id": "local",
      "label": "editor:library.types.local",
      "user": false,
      "icon": "font-awesome/fa-hdd-o"
    },
    {
      "id": "examples",
      "label": "editor:library.types.examples",
      "user": false,
      "icon": "font-awesome/fa-life-ring",
      "types": [
        "flows"
      ],
      "readOnly": true
    }
  ],
  "flowFilePretty": true,
  "externalModules": {},
  "flowEncryptionType": "system",
  "diagnostics": {
    "enabled": true,
    "ui": true
  },
  "runtimeState": {
    "enabled": false,
    "ui": false
  },
  "functionExternalModules": true,
  "functionTimeout": 0,
  "tlsConfigDisableLocalFiles": false,
  "editorTheme": {
    "palette": {},
    "projects": {
      "enabled": false,
      "workflow": {
        "mode": "manual"
      }
    },
    "multiplayer": {
      "enabled": false
    },
    "languages": [
      "de",
      "en-US",
      "es-ES",
      "fr",
      "ja",
      "ko",
      "pt-BR",
      "ru",
      "zh-CN",
      "zh-TW"
    ],
    "themes": []
  }
}
}


function getTheme() {
  return {
  "page": {
    "title": "Node-RED",
    "favicon": "favicon.ico",
    "tabicon": {
      "icon": "red/images/node-red-icon-black.svg",
      "colour": "#8f0000"
    }
  },
  "header": {
    "title": "Node-RED",
    "image": "red/images/node-red.svg"
  },
  "asset": {
    "red": "red/red.js",
    "main": "red/main.js",
    "vendorMonaco": "vendor/monaco/monaco-bootstrap.js"
  },
  "themes": []
}
}

